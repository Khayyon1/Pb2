{"version":3,"file":"main.js","sources":["../../src/mirror.js","../../src/utils.js","../../src/input.js","../../src/editable.js","../../src/main.js"],"sourcesContent":["const attributes = [\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderRightWidth',\n  'borderTopStyle',\n  'borderRightStyle',\n  'borderBottomStyle',\n  'borderLeftStyle',\n  'borderTopWidth',\n  'boxSizing',\n  'fontFamily',\n  'fontSize',\n  'fontWeight',\n  'height',\n  'letterSpacing',\n  'lineHeight',\n  'marginBottom',\n  'marginLeft',\n  'marginRight',\n  'marginTop',\n  'outlineWidth',\n  'overflow',\n  'overflowX',\n  'overflowY',\n  'paddingBottom',\n  'paddingLeft',\n  'paddingRight',\n  'paddingTop',\n  'textAlign',\n  'textOverflow',\n  'textTransform',\n  'whiteSpace',\n  'wordBreak',\n  'wordWrap',\n];\n\n/**\n * Create a mirror\n *\n * @param {Element} element The element\n * @param {string} html The html\n *\n * @return {object} The mirror object\n */\nconst createMirror = (element, html) => {\n\n  /**\n   * The mirror element\n   */\n  const mirror = document.createElement('div');\n\n  /**\n   * Create the CSS for the mirror object\n   *\n   * @return {object} The style object\n   */\n  const mirrorCss = () => {\n    const css = {\n      position: 'absolute',\n      left: -9999,\n      top: 0,\n      zIndex: -2000\n    };\n\n    if (element.tagName === 'TEXTAREA') {\n      attributes.push('width');\n    }\n\n    attributes.forEach((attr) => {\n      css[attr] = getComputedStyle(element)[attr];\n    });\n\n    return css;\n  };\n\n  /**\n   * Initialize the mirror\n   *\n   * @param {string} html The html\n   *\n   * @return {void}\n   */\n  const initialize = (html) => {\n    const styles = mirrorCss();\n    Object.keys(styles).forEach(key => {\n      mirror.style[key] = styles[key];\n    });\n    mirror.innerHTML = html;\n    element.parentNode.insertBefore(mirror, element.nextSibling);\n  };\n\n  /**\n   * Get the rect\n   *\n   * @return {Rect} The bounding rect\n   */\n  const rect = () => {\n    const marker = mirror.ownerDocument.getElementById('caret-position-marker');\n    const boundingRect = {\n      left: marker.offsetLeft,\n      top: marker.offsetTop,\n      height: marker.offsetHeight\n    };\n    mirror.parentNode.removeChild(mirror);\n\n    return boundingRect;\n  };\n\n  initialize(html);\n\n  return {\n    rect,\n  };\n};\n\nexport default createMirror;\n","/**\n * Check if a DOM Element is content editable\n *\n * @param {Element} element  The DOM element\n *\n * @return {bool} If it is content editable\n */\nexport const isContentEditable = (element) => !!(\n  element.contentEditable &&\n  element.contentEditable === 'true'\n);\n\n/**\n * Get the context from settings passed in\n *\n * @param {object} settings The settings object\n *\n * @return {object} window and document\n */\nexport const getContext = (settings = {}) => {\n  const { customPos, iframe, noShadowCaret } = settings;\n  if (iframe) {\n    return {\n      iframe,\n      window: iframe.contentWindow,\n      document: iframe.contentDocument || iframe.contentWindow.document,\n      noShadowCaret,\n      customPos,\n    };\n  }\n\n  return {\n    window,\n    document,\n    noShadowCaret,\n    customPos,\n  };\n};\n\n/**\n * Get the offset of an element\n *\n * @param {Element} element The DOM element\n * @param {object} ctx The context\n *\n * @return {object} top and left\n */\nexport const getOffset = (element, ctx) => {\n  const win = ctx && ctx.window || window;\n  const doc = ctx && ctx.document || document;\n  const rect = element.getBoundingClientRect();\n  const docEl = doc.documentElement;\n  const scrollLeft = win.pageXOffset || docEl.scrollLeft;\n  const scrollTop = win.pageYOffset || docEl.scrollTop;\n\n  return {\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft\n  };\n};\n\n/**\n * Check if a value is an object\n *\n * @param {any} value The value to check\n *\n * @return {bool} If it is an object\n */\nexport const isObject = (value) => typeof value === 'object' && value !== null;\n","import createMirror from './mirror';\nimport { getOffset as elementOffset } from './utils';\n\n/**\n * Create a Input caret object.\n *\n * @param {Element} element The element\n * @param {Object} ctx The context\n */\nconst createInputCaret = (element, ctx) => {\n\n  /**\n   * Get the current position\n   *\n   * @returns {int} The caret position\n   */\n  const getPos = () => {\n    return element.selectionStart;\n  };\n\n  /**\n   * Set the position\n   *\n   * @param {int} pos The position\n   *\n   * @return {Element} The element\n   */\n  const setPos = (pos) => {\n    element.setSelectionRange(pos, pos);\n\n    return element;\n  };\n\n  /**\n   * The offset\n   *\n   * @param {int} pos The position\n   *\n   * @return {object} The offset\n   */\n  const getOffset = (pos) => {\n    const rect = elementOffset(element);\n    const position = getPosition(pos);\n\n    return {\n      top: rect.top + position.top + ctx.document.body.scrollTop,\n      left: rect.left + position.left + ctx.document.body.scrollLeft,\n      height: position.height,\n    };\n  };\n\n  /**\n   * Get the current position\n   *\n   * @param {int} pos The position\n   *\n   * @return {object} The position\n   */\n  const getPosition = (pos) => {\n    const format = (val) => {\n      let value = val.replace(/<|>|`|\"|&/g, '?')\n        .replace(/\\r\\n|\\r|\\n/g,'<br/>');\n      return value;\n    };\n\n    if (ctx.customPos || ctx.customPos === 0) {\n      pos = ctx.customPos;\n    }\n\n    const position = pos === undefined ? getPos() : pos;\n    const startRange = element.value.slice(0, position);\n    const endRange = element.value.slice(position);\n    let html = `<span style=\"position: relative; display: inline;\">${format(startRange)}</span>`;\n    html += '<span id=\"caret-position-marker\" style=\"position: relative; display: inline;\">|</span>';\n    html += `<span style=\"position: relative; display: inline;\">${format(endRange)}</span>`;\n\n    const mirror = createMirror(element, html);\n    const rect = mirror.rect();\n    rect.pos = getPos();\n\n    return rect;\n  };\n\n  return {\n    getPos,\n    setPos,\n    getOffset,\n    getPosition,\n  };\n};\n\nexport default createInputCaret;\n","/**\n * Create an Editable Caret\n * @param {Element} element The editable element\n * @param {object|null} ctx The context\n *\n * @return {EditableCaret}\n */\nconst createEditableCaret = (element, ctx) => {\n\n  /**\n   * Set the caret position\n   *\n   * @param {int} pos The position to se\n   *\n   * @return {Element} The element\n   */\n  const setPos = (pos) => {\n    const sel = ctx.window.getSelection();\n    if (sel) {\n      let offset = 0;\n      let found = false;\n      const find = (position, parent) => {\n        for (let i = 0; i < parent.childNodes.length; i++) {\n          const node = parent.childNodes[i];\n          if (found) {\n            break;\n          }\n          if (node.nodeType === 3) {\n            if (offset + node.length >= position) {\n              found = true;\n              const range = ctx.document.createRange();\n              range.setStart(node, position - offset);\n              sel.removeAllRanges();\n              sel.addRange(range);\n              break;\n            } else {\n              offset += node.length;\n            }\n          } else {\n            find(pos, node);\n          }\n        }\n      };\n      find(pos, element);\n    }\n\n    return element;\n  };\n\n  /**\n   * Get the offset\n   *\n   * @return {object} The offset\n   */\n  const getOffset = () => {\n    const range = getRange();\n    let offset = {\n      height: 0,\n      left: 0,\n      right: 0,\n    };\n\n    if (!range) {\n      return offset;\n    }\n\n    const hasCustomPos = ctx.customPos || ctx.customPos === 0;\n\n    // endContainer in Firefox would be the element at the start of\n    // the line\n    if ((range.endOffset - 1 > 0 && range.endContainer !== element) || hasCustomPos) {\n      const clonedRange = range.cloneRange();\n      const fixedPosition = hasCustomPos ? ctx.customPos : range.endOffset;\n      clonedRange.setStart(range.endContainer, fixedPosition - 1 < 0 ? 0 : fixedPosition - 1);\n      clonedRange.setEnd(range.endContainer, fixedPosition);\n      const rect = clonedRange.getBoundingClientRect();\n      offset = {\n        height: rect.height,\n        left: rect.left + rect.width,\n        top: rect.top,\n      };\n      clonedRange.detach();\n    }\n\n    if ((!offset || (offset && offset.height === 0)) && !ctx.noShadowCaret) {\n      const clonedRange = range.cloneRange();\n      const shadowCaret = ctx.document.createTextNode('|');\n      clonedRange.insertNode(shadowCaret);\n      clonedRange.selectNode(shadowCaret);\n      const rect = clonedRange.getBoundingClientRect();\n      offset = {\n        height: rect.height,\n        left: rect.left,\n        top: rect.top,\n      };\n      shadowCaret.parentNode.removeChild(shadowCaret);\n      clonedRange.detach();\n    }\n\n    if (offset) {\n      const doc = ctx.document.documentElement;\n      offset.top += ctx.window.pageYOffset - (doc.clientTop || 0);\n      offset.left += ctx.window.pageXOffset - (doc.clientLeft || 0);\n    }\n\n    return offset;\n  };\n\n  /**\n   * Get the position\n   *\n   * @return {object} The position\n   */\n  const getPosition = () => {\n    const offset = getOffset();\n    const pos = getPos();\n    const rect = element.getBoundingClientRect();\n    const inputOffset = {\n      top: rect.top + ctx.document.body.scrollTop,\n      left: rect.left + ctx.document.body.scrollLeft\n    };\n    offset.left -= inputOffset.left;\n    offset.top -= inputOffset.top;\n    offset.pos = pos;\n\n    return offset;\n  };\n\n  /**\n   * Get the range\n   *\n   * @return {Range|null}\n   */\n  const getRange = () => {\n    if (!ctx.window.getSelection) {\n      return;\n    }\n    const sel = ctx.window.getSelection();\n\n    return sel.rangeCount > 0 ? sel.getRangeAt(0) : null;\n  };\n\n  /**\n   * Get the caret position\n   *\n   * @return {int} The position\n   */\n  const getPos = () => {\n    const range = getRange();\n    const clonedRange = range.cloneRange();\n    clonedRange.selectNodeContents(element);\n    clonedRange.setEnd(range.endContainer, range.endOffset);\n    const pos = clonedRange.toString().length;\n    clonedRange.detach();\n\n    return pos;\n  };\n\n  return {\n    getPos,\n    setPos,\n    getPosition,\n    getOffset,\n    getRange,\n  };\n};\n\nexport default createEditableCaret;\n","import createInputCaret from './input';\nimport createEditableCaret from './editable';\nimport {\n  isContentEditable,\n  getContext,\n  isObject,\n} from './utils';\n\nexport { getOffset } from './utils';\n\nconst createCaret = (element, ctx) => {\n  if (isContentEditable(element)) {\n    return createEditableCaret(element, ctx);\n  }\n\n  return createInputCaret(element, ctx);\n};\n\nexport const position = (element, value, settings = {}) => {\n  let options = settings;\n  if (isObject(value)) {\n    options = value;\n    value = null;\n  }\n  const ctx = getContext(options);\n  const caret = createCaret(element, ctx);\n\n  if (value || value === 0) {\n    return caret.setPos(value);\n  }\n\n  return caret.getPosition();\n};\n\n/**\n *\n * @param {Element} element The DOM element\n * @param {number|undefined} value The value to set\n * @param {object} settings Any settings for context\n */\nexport const offset = (element, value, settings = {}) => {\n  let options = settings;\n  if (isObject(value)) {\n    options = value;\n    value = null;\n  }\n\n  const ctx = getContext(options);\n  const caret = createCaret(element, ctx);\n  return caret.getOffset(value);\n};\n"],"names":["attributes","createMirror","element","html","mirror","document","createElement","mirrorCss","css","tagName","push","forEach","attr","getComputedStyle","initialize","styles","keys","style","key","innerHTML","parentNode","insertBefore","nextSibling","rect","marker","ownerDocument","getElementById","boundingRect","offsetLeft","offsetTop","offsetHeight","removeChild","isContentEditable","contentEditable","getContext","settings","customPos","iframe","noShadowCaret","contentWindow","contentDocument","getOffset","ctx","win","window","doc","getBoundingClientRect","docEl","documentElement","scrollLeft","pageXOffset","scrollTop","pageYOffset","top","left","isObject","value","createInputCaret","getPos","selectionStart","setPos","pos","setSelectionRange","elementOffset","position","getPosition","body","height","format","val","replace","undefined","startRange","slice","endRange","createEditableCaret","sel","getSelection","offset","found","find","parent","i","childNodes","length","node","nodeType","range","createRange","setStart","removeAllRanges","addRange","getRange","hasCustomPos","endOffset","endContainer","clonedRange","cloneRange","fixedPosition","setEnd","width","detach","shadowCaret","createTextNode","insertNode","selectNode","clientTop","clientLeft","inputOffset","rangeCount","getRangeAt","selectNodeContents","toString","createCaret","options","caret"],"mappings":"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"}